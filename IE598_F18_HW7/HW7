import pandas as pd
import matplotlib.pyplot as plt
import datetime
import numpy as np

from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import mean_squared_error
from sklearn.metrics import accuracy_score,confusion_matrix

data = pd.read_csv("wine.csv")

X = data.loc[:,'Alcohol':'Proline'].values
y = data['Class'].values
feat_labels = data.columns[1:]

X_train, X_test, y_train, y_test = train_test_split(
        X, y, test_size=0.33, random_state=42)

a = [100*(x+1) for x in range(100)]
runingtime = []
for item in range(1,10):
    print("While n_estimators = ",item)
    
    starttime = datetime.datetime.now()
    forest = RandomForestClassifier(n_estimators=item,
                                   random_state=1, n_jobs=-1)
    
    forest.fit(X_train, y_train)
    y_train_pred = forest.predict(X_train)
    y_test_pred = forest.predict(X_test)
    print('MSE train: %.3f, test: %.3f' % (
            mean_squared_error(y_train, y_train_pred),
            mean_squared_error(y_test, y_test_pred)))
    print('Score train: %.3f, test: %.3f' % (
            accuracy_score(y_train, y_train_pred),
            accuracy_score(y_test, y_test_pred)))
    print(confusion_matrix(y_test,y_test_pred))
    endtime = datetime.datetime.now()
    print ("Runing time = ",endtime - starttime,'\n')
    runingtime.append(endtime - starttime)

import math
time = []
for item in runingtime:
    time.append(item.seconds+item.microseconds/10**(int(math.log10(item.microseconds))+1))    


plt.plot(a,time)
plt.xlabel("number of estimators")
plt.ylabel("running time in seconds")
plt.show()
    
importances = forest.feature_importances_
indices = np.argsort(importances)[::-1]
for f in range(X_train.shape[1]):
    print("%2d) %-*s %f" % (f + 1, 30,
    feat_labels[indices[f]],
    importances[indices[f]]))
plt.title('Feature Importance')
plt.bar(range(X_train.shape[1]),
    importances[indices],
    align='center')
plt.xticks(range(X_train.shape[1]),
    feat_labels, rotation=90)
plt.xlim([-1, X_train.shape[1]])
plt.tight_layout()
plt.show()
