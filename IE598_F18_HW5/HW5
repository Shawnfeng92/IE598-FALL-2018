import pandas as pd
import numpy as np
from matplotlib.colors import ListedColormap
import matplotlib.pyplot as plt
import seaborn as sns

from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.decomposition import PCA, KernelPCA
from sklearn.metrics import accuracy_score
from sklearn.svm import SVC
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis as LDA

pd.set_option('max_columns',40)
col = ["Class","Alcohol", "Malic acid", "Ash","Alcalinity of ash","Magnesium",
       "Total phenols","Flavanoids","Nonflavanoid phenols","Proanthocyanins",
       "Color intensity","Hue","OD280/OD315","Proline"]
df_wine = pd.read_csv('https://archive.ics.uci.edu/ml/'
                      'machine-learning-databases/wine/wine.data',names = col)
X, y = df_wine.iloc[:, 1:].values, df_wine.iloc[:, 0].values
sc = StandardScaler()
X_std = sc.fit_transform(X)
cov_mat = np.cov(X_std.T)

print(df_wine.describe())
sns.pairplot(df_wine,size = 4)
fig, ax = plt.subplots(figsize=(20,20))
heatMap = sns.heatmap(cov_mat, cbar=True,annot=True,square=True,fmt='.2f',
                      annot_kws={'size': 15}, yticklabels=col, xticklabels=col)
fig.clear()

X_train, X_test, y_train, y_test = \
train_test_split(X_std, y, test_size=0.2,stratify=y,random_state=42)
cov_mat = np.cov(X_train.T)
print("\nFor baseline test:\n")
lr = LogisticRegression()
lr = lr.fit(X_train,y_train)
y_pred = lr.predict(X_train)
print('Logistic Regression Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
y_pred = lr.predict(X_test)
print('Logistic Regression Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))

svm = SVC(kernel='linear', C=1.0, random_state=1)
svm.fit(X_train,y_train)
y_pred = svm.predict(X_train)
print('SVM Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
y_pred = svm.predict(X_test)
print('SVM Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))

eigen_vals, eigen_vecs = np.linalg.eig(cov_mat)
tot = sum(eigen_vals)
var_exp = [(i / tot) for i in sorted(eigen_vals, reverse=True)]
cum_var_exp = np.cumsum(var_exp)

eigen_pairs = [(np.abs(eigen_vals[i]), eigen_vecs[:, i]) for i in range(len(eigen_vals))]
eigen_pairs.sort(key=lambda k: k[0], reverse=True)

w = np.hstack((eigen_pairs[0][1][:, np.newaxis], eigen_pairs[1][1][:, np.newaxis]))
X_train_pca = X_train.dot(w)

def plot_decision_regions(X, y, classifier,title, resolution=0.02):
    markers = ('s', 'x', 'o', '^', 'v')
    colors = ('red', 'blue', 'lightgreen', 'gray', 'cyan')
    cmap = ListedColormap(colors[:len(np.unique(y))])
    x1_min, x1_max = X[:, 0].min() - 1, X[:, 0].max() + 1
    x2_min, x2_max = X[:, 1].min() - 1, X[:, 1].max() + 1
    xx1, xx2 = np.meshgrid(np.arange(x1_min, x1_max, resolution), np.arange(x2_min, x2_max, resolution))
    Z = classifier.predict(np.array([xx1.ravel(), xx2.ravel()]).T)
    Z = Z.reshape(xx1.shape)
    plt.contourf(xx1, xx2, Z, alpha=0.4, cmap=cmap)
    plt.xlim(xx1.min(), xx1.max())
    plt.ylim(xx2.min(), xx2.max())
    for idx, cl in enumerate(np.unique(y)):
        plt.scatter(x=X[y == cl, 0],
            y=X[y == cl, 1], alpha=0.6, c=cmap(idx),
            edgecolor='black', marker=markers[idx], label=cl) 
    plt.xlabel('PC 1')
    plt.ylabel('PC 2')
    plt.legend(loc='lower left')
    plt.title(title)
    plt.show()

pca = PCA(n_components=2)
X_train_pca = pca.fit_transform(X_train)
X_test_pca = pca.transform(X_test)

print("\nFor PCA test:\n")
lr = LogisticRegression()
lr = lr.fit(X_train_pca,y_train)
y_pred = lr.predict(X_train_pca)
print('Logistic Regression Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
plot_decision_regions(X_train_pca, y_train, classifier=lr,title = "Logistic Regression PCA Train")
y_pred = lr.predict(X_test_pca)
print('Logistic Regression Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))
plot_decision_regions(X_test_pca, y_test, classifier=lr, title = 'Logistic Regression PCA Test')

svm = SVC(kernel='linear', C=1.0, random_state=1)
svm = svm.fit(X_train_pca,y_train)
y_pred = svm.predict(X_train_pca)
print('SVM Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
plot_decision_regions(X_train_pca, y_train, classifier=svm,title = "SVM PCA Train")
y_pred = svm.predict(X_test_pca)
print('SVM Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))
plot_decision_regions(X_test_pca, y_test, classifier=svm,title = "SVM PCA Train")


lda = LDA(n_components=2)
X_train_lda = lda.fit_transform(X_train, y_train)
X_test_lda = lda.transform(X_test)

print("\nFor LDA test:\n")
lr = LogisticRegression()
lr = lr.fit(X_train_lda,y_train)
y_pred = lr.predict(X_train_lda)
print('Logistic Regression Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
plot_decision_regions(X_train_lda, y_train, classifier=lr,title = "Logistic Regression LDA Train")
y_pred = lr.predict(X_test_lda)
print('Logistic Regression Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))
plot_decision_regions(X_test_lda, y_test, classifier=lr, title = 'Logistic Regression LDA Test')

svm = SVC(kernel='linear', C=1.0, random_state=1)
svm = svm.fit(X_train_lda,y_train)
y_pred = svm.predict(X_train_lda)
print('SVM Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
plot_decision_regions(X_train_lda, y_train, classifier=svm,title = "SVM LDA Train")
y_pred = svm.predict(X_test_lda)
print('SVM Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))
plot_decision_regions(X_test_lda, y_test, classifier=svm,title = "SVM LDA Train")

for i in range(20): 
    scikit_kpca = KernelPCA(n_components=2,kernel='rbf', gamma=10**(i-10))
    X_train_kpca = scikit_kpca.fit_transform(X_train)
    X_test_kpca = scikit_kpca.transform(X_test)
    print("\nFor "+str(10**(i-10))+" kpca test:\n")
    lr = LogisticRegression()
    lr = lr.fit(X_train_kpca,y_train)
    y_pred = lr.predict(X_train_kpca)
    print('Logistic Regression Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
    plot_decision_regions(X_train_kpca, y_train, classifier=lr,title = "Logistic Regression kpca Train")
    y_pred = lr.predict(X_test_kpca)
    print('Logistic Regression Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))
    plot_decision_regions(X_test_kpca, y_test, classifier=lr, title = 'Logistic Regression kpca Test')
    
    svm = SVC(kernel='linear', C=1.0, random_state=1)
    svm = svm.fit(X_train_kpca,y_train)
    y_pred = svm.predict(X_train_kpca)
    print('SVM Train Accuracy: %.2f' % accuracy_score(y_train, y_pred))
    plot_decision_regions(X_train_kpca, y_train, classifier=svm,title = "SVM kpca Train")
    y_pred = svm.predict(X_test_kpca)
    print('SVM Test Accuracy: %.2f' % accuracy_score(y_test, y_pred))
    plot_decision_regions(X_test_kpca, y_test, classifier=svm,title = "SVM kpca Train")
print("My name is {Xiaokang Feng}")
print("My NetID is: {668129807}")
print("I hereby certify that I have read the University policy on Academic Integrity and that I am not in violation.")
